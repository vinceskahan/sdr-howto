1116a1117,1122
> #----------
> # next section vds
> # derived from WH31E example
> #----------
> #
> class AmbientWH31BPacket(Packet):
1117a1124,1173
>     # {"time" : "2024-03-02 21:27:33", "model" : "AmbientWeather-WH31B", "id" : 55, "channel" : 4, "battery_ok" : 1, "temperature_C" : 20.340, "humidity" : 43, "data" : "7f00000000", "mic" : "CRC"}
> 
>     IDENTIFIER = "AmbientWeather-WH31B"
> 
>     @staticmethod
>     def parse_json(obj):
>         pkt = dict()
>         pkt['dateTime'] = Packet.parse_time(obj.get('time'))
>         pkt['usUnits'] = weewx.METRICWX
>         pkt['station_id'] = obj.get('id')
>         pkt['temperature'] = Packet.get_float(obj, 'temperature_C')
>         pkt['humidity'] = Packet.get_float(obj, 'humidity')
>         pkt['battery'] = 0 if Packet.get_float(obj, 'battery_ok') == 1 else 1
>         pkt['channel'] = Packet.get_int(obj, 'channel')
>         return AmbientWH31BPacket.insert_ids(pkt)
> 
>     @staticmethod
>     def insert_ids(pkt):
>         station_id = pkt.pop('station_id', '0000')
>         pkt = Packet.add_identifiers(pkt, station_id, AmbientWH31BPacket.__name__)
>         return pkt
> 
> # this is odd - the driver will match on WH31B for the sensor_map
> # but will complain if this identifier is not known....
> class FineoffsetWH32Packet(Packet):
> 
>     # {"time" : "2024-03-03 10:41:36", "model" : "Fineoffset-WH32", "id" : 35, "battery_ok" : 1, "temperature_C" : 2.500, "humidity" : 98, "mic" : "CRC"}
> 
>     IDENTIFIER = "Fineoffset-WH32"
> 
>     @staticmethod
>     def parse_json(obj):
>         pkt = dict()
>         pkt['dateTime'] = Packet.parse_time(obj.get('time'))
>         pkt['usUnits'] = weewx.METRICWX
>         pkt['station_id'] = obj.get('id')
>         pkt['temperature'] = Packet.get_float(obj, 'temperature_C')
>         pkt['humidity'] = Packet.get_float(obj, 'humidity')
>         pkt['battery'] = 0 if Packet.get_float(obj, 'battery_ok') == 1 else 1
>         return FineoffsetWH32Packet.insert_ids(pkt)
> 
>     @staticmethod
>     def insert_ids(pkt):
>         station_id = pkt.pop('station_id', '0000')
>         pkt = Packet.add_identifiers(pkt, station_id, AmbientWH31BPacket.__name__)
>         return pkt
> 
> #----------
> #----------
> 
3273a3330,3333
> 
>         self._log_duplicate = tobool(stn_dict.get('log_duplicate_readings', True))    # vds - log dups if debug > 0
>         self._log_packet    = tobool(stn_dict.get('log_packets', True))               # vds - log packets if debug > 0
> 
3278c3338,3347
<         self._ts_delta = stn_dict.get('timestamp_match_threshhold', SDRDriver.TIMESTAMP_MATCH_THRESHHOLD)
---
>         self._ts_delta = int(stn_dict.get('timestamp_match_threshhold', SDRDriver.TIMESTAMP_MATCH_THRESHHOLD))
> 
>         # more info
>         loginf('log_lines is %s' % self._log_lines)
>         loginf('log_unknown is %s' % self._log_unknown)
>         loginf('log_unmapped is %s' % self._log_unmapped)
>         loginf('log_duplicate is %s' % self._log_duplicate)
>         loginf('log_packet is %s' % self._log_packet)
>         loginf('timestamp_match_threshold is %s' % self._ts_delta)
> 
3286c3355
< 
---
>                                 
3304c3373,3374
<                                 logdbg("packet=%s" % pkt)
---
>                                 if self._log_packet:
>                                     logdbg("packet=%s" % pkt)
3309c3379,3380
<                                 logdbg("ignoring duplicate packet %s" % pkt)
---
>                                 if self._log_duplicate:
>                                     logdbg("ignoring duplicate packet %s" % pkt)
